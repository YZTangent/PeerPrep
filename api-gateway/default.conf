server {
    listen      8080;
    resolver    127.0.0.11; # docker default DNS server IP address

    location /health {
        # health check
        return 200;
    }
    
    location /user {
        # handles authentication internally
        proxy_pass http://user-service:8001/user/;
    }

    location /auth {
        # handles authentication internally
        proxy_pass http://user-service:8001/auth;
    }

    location /auth/verify {
        internal;
        
        # handles pre-flight requests for auth_request sub-requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'PUT, PATCH, POST, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, Content-Type, Accept, Cookie' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 200;
        }

        proxy_pass http://user-service:8001/auth/verify;
        
        # ensures original request body is passed on to route after verification;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location /auth/verifyAdmin {
        internal;

        # handles pre-flight requests for auth_request sub-requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'PUT, PATCH, POST, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, Content-Type, Accept, Cookie' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 200;
        }

        proxy_pass http://user-service:8001/auth/verifyAdmin;

        # ensures original request body is passed on to route after verification;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location /question {
        auth_request /auth/verify;
        
        proxy_pass http://question-service:8002/question/;
    }

    location /question/auth/ {
        auth_request /auth/verifyAdmin;

        proxy_pass http://question-service:8002/question/auth/;
    }

    location /matching {
        auth_request /auth/verify;

        proxy_pass http://matching-service:8003/matching/;
    }

    location /history {
        auth_request /auth/verify;

        proxy_pass http://history-service:8005/history/;
    }

    location /collab {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_pass http://collab-service:8004/collab;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location @400 {
        return 400 '{ "status": 400, "message": "Bad request" }\n';
    }

    error_page 404 = @400;         # Treat invalid paths as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to client
    default_type application/json; # If no content-type, assume JSON
}